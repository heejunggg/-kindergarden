
-------------복습-----------------

git 
github 회원가입
github 저장소 생성
내 컴퓨터에 github email., name을 등록
(git config --global user.email "내 이에밀입력")

---------------------------------------------------

최초커밋
로컬저장소와 원격저장소를 분리해서 생각
(내컴퓨터)   (github)

디렉토리 선택 -- 상위 폴더에  .git이 생긴다.--안됨
            -- 하위 폴더에 .git이 생긴다. --안됨

cd 폴더명 -> 하위 폴더
cd .. -> 상위 폴더
cd 경로 -> 해당 경로




로컬 저장소 생성 --> git init (.git이라는 폴더가 생긴다.)

내가 저장하고 싶은 파일을 선택 -> git add 파일명  
                            -> git add .  (->수정사항이 있는 전체파일 거의 이렇게 올린다.)

로컬 저장소에 히스토리로 저장 -> git commit -m '메세지'
로컬 저장소와 원격 저장소를 연결 -> git remote add [별명] [주소]

원격저장소에 로컬 저장소에 저장된 코드를 공유 -> git push [별명] [브랜치명]

*주의사항
브랜치, 관련 없는 히스토리 내역

브랜치는 언제 생성해야하는가?
분기 - 버전별로 따로 보관할 수 있다.

v0.1버전 배포하고 다음에 v0.2를 새로운기능 추가 -> 기능 개발 브랜치 각각 개발 (feat/login)
v0.2 -> 버그발생 -> 디버깅 -> 오류를 찾는 과정
--> v0.2코드는 보존되거 있기 때문에  -> 브랜치 이동만으로 해당 코드로 디버깅 가능
(feat/login -> dev -> git checkout dev)

-----------------------------------------
브랜치 생성 이동 -> git brandch 브랜치명
브랜치 이동 -> git checkout 브랜치명
생성과 이동 -> git checkout -b 브랜치명


내가 push 및 pull을 받아야하는 경우가 있음.
브랜치명이 일치하는지 반드시 확인

1. vocode 우측 하단의 분기명(main인지)을 확인하는
2. git branch -> 현재 활성화 된 브랜치에 하이라이트 되어있다.(main으로 안바뀔경우 )

-----------------------------------------------------------------------

관련 없는 히스토리

push -> 푸쉬 하기전 pull ->  git pull 별명 브랜치명 -> 관련 없는 커밋이야 라고 에러가 뜸 히스토리가 완전히 다르다는 얘기.

git pull origin 별명 브랜치명 --rebase (a,b를 내역 없이 합치겠다.)
git pull 별명 브랜치명 --allow-unrelated-histories

------------------------03.23------------------------------------------------

git flow

main, dev (default branch)
--> dev -> branch 생성 (style / login) -> 개발  -> github에 style/login branch 코드를 올린다. 
-> github pull-request를 통해 dev에 merge 요청
-> code review (팀원이 내코드를 보면서 ....) -> 수정 -> 재요청/x -> approve(승인) -> merge(dev - feat/login)

code review
    1. CTO 총괄 리뷰
    2. 팀원 리뷰
    3. 코드 리뷰 마니또
    4. 리뷰 하지 않는 것

code confict(충돌) 겹치는 부분...브랜치가 서로 다르니 충돌난다.
    feat/login - dev(feat/..., style/)
    수정을 했으면 수정한 내용만 코드를 바꿔준다, 여러분이 생성한 브랜치와 비교
                                                            (dev)

    dev 브랜치에 다른 개발자들의 코드가 섞여있는 상태, 다시 한번 비교.
    충돌된 내용이 없다면 merge가 가능하지만 충돌된 내용이 없다면 해결 후 merge

기준 브랜치 -> 브랜치 생성 -> 개발 -> 합병 요청 -> 리뷰 -> 리뷰한 내용 수정 -> 합병 -> 충돌 해결 후  -> 합병

-------------------------------------------------------------------------------------

페어 1분이 오거나이제이션 오너, 나머지 분은 멤버
수강생 5분 1분이 오거나이제이션 오너, 나머지 분은 멤버---나.
놀분 5분 1분 오거나이제이션 오너(썜), 나머지 분은 멤버

-------------------------------------------------------------------------------------

"feat : 로그인 기능을 추가하였습니다."
[특정기능]

"fix : 로그인이 되지 않았던 오류를 수정하였습니다."
[버그수정]

"chore : 잡다한 일"

"refactor : 리팩터링" -다시만든다.
들어가는 값이 같고 결과가 같다. 여기 안의 코드를 수정하는 과정
"docs : 문서를 수정할 일있으면."

"style, Ui" 

README.md - 랜딩페이지 - 작성을 위한 마크다운 언어.


 