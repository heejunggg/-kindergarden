//
------------------------------------------------------------------
6개월만 다니면 누구나 취업할 수 있습니다 (X)

자기 주도적으로 6개월 간 학습에 몰입할 수 있는 분

코딩은 누구나 할 수 있지만, 아무나 할 수 없다.

나를 보여줄수있는건 코드 밖에 없다.

-------------------------------------------------------------------

git
    코드 버전 관리 시스템
    => 코드의 히스토리를 관리(보관)

    1. 히스토리 보관 (버전관리)
        ---> 필요없는 코드를 삭제 --> 필요해짐 --> 이전 코드를 참고할수 있다.
        ---> 버전 관리의 필요성 --> 버전 업데이트 후 롤백
        ---> 협엽 시 팀원이 이해할 수 있는 코드의 최소화

    2. 팀원 간의 코드 공유
        ----> 모든 사람 (오픈소스 - 내코드 공개) ---> 개발 커뮤니티(이코드 실행이 잘안되요..)
    
    3. 이슈 트래킹
    4. 리뷰를 통한 개발 문화와 엣지 케이스 발견

---------------------------------------------------------------------

    github
    https://github.com

    git으로 관리된 코드를 웹 사이트(UI)에 공유하여 보다 편리하게
    코드를 관리하고 리뷰할 수 있는 시스템 (원격-저장소)

    git
    https://git-scm.com/downloads  => 회원가입 안해도 다운해도 됨. 

    내컴퓨터에 설치해서 내 컴퓨터에서 코드를 관리 (로컬-저장소)


---------------------------------------------------------------------

    github-flow(git-flow)

        1. 내가 코드를 올리고 싶은 패키지를 선택 (음악은 올리면 안됨 저작권걸림)
        --> day04 안에 있는 css를 올리고싶으면 day04폴더를 올리면 됨

        2. 아무것도 저장이 되어있찌 않을 때는 저장 공간 생성 (로컬저장소)
            git init
            내컴퓨터에 내것을 저장
        
        3. 선택한 패키지에서 내가 저장하고 싶은 파일을 선택 --> 준비 (스테이징)
            git add 파일명 (특정 파일)
            git add .  (패키지 내 같은 경로에 있는 모든 파일)

        4. 로컬 저장소에 준비된 파일을 저장 (커밋)
            git commit -m "커밋 메세지(헤더)" -m "커밋 메세지(본문)" -m "커밋 메세지(각주)"

        5. 커밋 내역을 확인 할 수 있음
            git log

        6. 원격 저장소 생성 -- 만약 생성이 되어있다면 생략 --new --repasitory
        7. 원격 저장소와 로컬 저장소를 연결
            git remote add 원격저장소명 (orgin) 원격저장소-주소 ----> code클릭하면 들어가면 주소 나와있다.

        8. 컨벤션에 대한 협의 - 이니셜라이즈( 기초셋팅을 git-hub에 올릴 준비) -충분히 얘기 후 대표1명이 이니셜라이즈하면됨.
            - 그전에 index사이즈는 몇..이런 협의

            index.html
            pages
                login.html
                sign-up.thml
            css
                reset.css
                common.css
                login.css
            assets
                img
                    ....
                font

        9. 로컬 저장소의 히스토리를 원격 저장소에 밀어넣기를 할것.

            git push 원격저장소명(origin) 브랜치명(main)
            -f를 하면 내것으로 덮고 그전에꺼 없어진다는 명령어.;;;;

            ** 주의사항
                너 로컬 저장소와 히스트리를 동기화 시켜야해!
                (A가 먼저 푸시했는데 B가 또 푸시를 하려면 위의처럼 에러가 나온다.)
                먼저 작성한 다른사람 코드를 원격 저장소의 코드를 다운 받아서 내 코드와 합쳐야한다.
                git pull origin main 통해서 코드를 다운로드 받을 수 있다.

                pull은 다운
                push는 올리기

        10. 분기 = branch 
            -같은코드베이스에서 시작하기 위해 복사본을 만든다는 얘기
            -동시개발
            main에 직접적으로 올리는건 안좋다. 얘를 본딴 dev를 만들고 거기에서 각자 브랜치를 만들어서 또 나눈다. 테스트한 후 dev로 옮긴다.
            나뭇가지

                내가 분기를 생성할 브랜치로 이동 (dev, main)
                -git checkout 브랜치명

                브랜치를 생성
                -git branch 브랜치명
                
                브랜치를 생성할 떈 가장 최신의 코드에서 생성하는 것이 좋다.
                -git pull ...

                브랜치를 생성하면서 이동
                -git checkout -b 브랜치명

                브랜치 목록을 확인하는 명령어
                -git branch

                병합이 된 후에는 보관해야할 이유가 없다면 브랜치 삭제
                -git brandch -D 브랜치명

---------------------------------------------------------------------

    1. 최초 커밋 --이니셜 템플릿을 통해서. ---한명만 함.
        git init - 로컬 저장소 생성
        git add .
        git commit -m '커밋메세지'
        github 원격 저장소 생성
        git remote add origin 레포지토리-주소
        *REAMME.md가 있으면 history가 달라서 에러가 발생 아래처럼   --rebase입력해줘야한다.
        *git pull origin main --rebase  (병합기록이 안나오고 합쳐짐)
        * 동기화
        git chekout main
        git push origin main

    2. 팀원 참여
        git clone 레포지토리-주소
        -----------

        clone이 아니라 다르게 하려면
        git init - git remote
        git checkout main
        git pull origin main

    3. 협엽 관리
        git checkout dev(시작점) --최신의 것으로 시작
        git pull origin dev(동기화) --최신의 것으로 다운받기 위해서.
        git checkout -b feat/login

        ...개발을 하고..

        git add .
        git commit -m '커밋메세지'

    github
        git push origin feat/login
        깃허브 홈페이지에 PR(Pull Request)생성 --PR이란 내가 병합해도될까요?요청
        승인이 있어야만 코드를 병합 가능 (리뷰)
        병합을 해야한다 -> 버튼을 누르면 병합이 가능
        충돌 상황이 발생할 경우 버튼이 비활성화 된다.

        충돌상황시
        git checkout dev
        git pull origin dev(dev최신화) -- 다른 사람 코드가 병합
        git checkout feat/login
        fit merge dev

        vscode 내에서 병합이 되었음을 알려주고.(소스트리에서) 병합이 완료되면 버튼이 다시 활성화
        ---PR로 이동해서 병합 버튼 눌러주면 병합이 종료
        

----------------------------------------------------------------------

        개인 레포지토리에 코드를 공유

        (최초)
        git init
        git remote
        -----
        (개발마다)
        git add
        git commit
        git push

---------------------------------------------------------
        터미널에서 폴더를 이동하는 명령어
            cd
            cd 폴더명 (현재 경로에 있는 폴더로 이동가능)
            cd.. (상위 폴더)
            cd 절대경로

---------------------------------------------------------

    최초
    컴퓨터 환경 설정에 본인의 깃허브 이메일과 닉네임을 등록한다.

    git config --global user.email 깃허브 이메일 주소
    git config --global user.name 깃허브 닉네임
    git config --list
    enter누름ㄴ 다음줄 + 확인 되었으면 q누르고 종료

----------------------------------------------------------

    git remote add origin 본인레퍼지토리 주소 친다.
    git remote 입력하고  origin나오면 잘 된거다.

    git add .
    git commit -m 'init'  ---> 메세지 이름 내가 아무거나...

    git checkout -b main  // 왼쪽하단에 master로 되어있어서 main으로 갈꺼다~~명령어 
    git push origin main --allow-unrelated-histories
    git pull origin main --rebase  //관계없는거 상관없이 새로 시작할거야.

    git push origin main

----------------------------------------------------------------------------------

//0323








            
            

    
